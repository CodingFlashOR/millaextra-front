---
import Layout from '../../../layouts/Layout.astro';
---

<Layout title='Variables'>
    <div class="md:w-1/2 m-auto flex flex-col gap-6 container mx-auto p-6">
        <h1 class="text-3xl font-bold text-center text-purple-800 mb-12">Variables y tipos de datos en javascript</h1>
        <h2 class="text-2xl font-bold text-center text-purple-800">¿Qué es una Variable?</h2>
        <p class="text-xl text-center text-gray-700">
            <span class="text-purple-800 font-bold">Variable:</span> En programación, una variable es un contenedor que almacena un valor. Puedes pensar en ella como una caja etiquetada donde puedes guardar diferentes tipos de información, como números, texto o incluso objetos más complejos. Las variables son fundamentales para escribir código dinámico y flexible.
        </p>
        <h2 class="text-2xl font-bold text-center text-purple-800">¿Qué es una Constante?</h2>
        <p class="text-xl text-center text-gray-700">
            <span class="text-purple-800 font-bold">Constante:</span> Una constante es similar a una variable, pero con una diferencia importante: su valor no cambia una vez que se le asigna. Es decir, es inmutable. Las constantes se utilizan para representar valores fijos que no deben modificarse durante la ejecución del programa.
        </p>
        <h2 class="text-2xl font-bold text-center text-purple-800 mt-10">Tipos de variables en JS:</h2>
        
        <h4 class="text-purple-800 font-bold text-xl">VAR:</h4>
        <ul class="list-disc ml-6 text-gray-700 text-lg">
            <li>
                <p class="font-medium text-purple-800">Ámbito:</p>
                <ul class="list-disc ml-4">
                    <li>Las variables declaradas con <span class="font-mono">var</span> tienen un ámbito global si se definen fuera de una función.</li>
                    <li>Si se declaran dentro de una función, su ámbito es local y solo están disponibles dentro de esa función.</li>
                </ul>
            </li>
            <li>
                <p class="font-medium text-purple-800">Reasignación:</p>
                <ul class="list-disc ml-4">
                    <li>Las variables con <span class="font-mono">var</span> pueden ser redeclaradas y modificadas dentro del mismo ámbito sin errores.</li>
                </ul>
            </li>
            <li>
                <p class="font-medium text-purple-800">Hoisting:</p>
                <ul class="list-disc ml-4">
                    <li>Las declaraciones con <span class="font-mono">var</span> se mueven al principio de su ámbito antes de la ejecución del código.</li>
                    <li>Esto significa que puedes usar una variable <span class="font-mono">var</span> antes de declararla, pero su valor será <span class="font-mono">undefined</span>.</li>
                </ul>
            </li>
        </ul>
        
                
        <h4 class="text-purple-800 font-bold text-xl">LET:</h4>
        <ul class="list-disc ml-6 text-gray-700 text-lg">
            <li>
                <p class="font-medium text-purple-800">Ámbito:</p>
                <ul class="list-disc ml-4">
                    <li>Las variables declaradas con <span class="font-mono">let</span> también tienen un ámbito local (bloque) cuando se definen dentro de una función o un bloque de código.</li>
                    <li>No están disponibles fuera de ese ámbito.</li>
                </ul>
            </li>
            <li>
                <p class="font-medium text-purple-800">Reasignación:</p>
                <ul class="list-disc ml-4">
                    <li>Puedes reasignar valores a una variable let, pero no puedes redeclararla dentro del mismo ámbito.</li>
                </ul>
            </li>
            <li>
                <p class="font-medium text-purple-800">Hoisting:</p>
                <ul class="list-disc ml-4">
                    <li>A diferencia de var, las variables let no se “elevan” al principio del ámbito. Debes declararlas antes de usarlas.</li>
                </ul>
            </li>
        </ul>

        <h4 class="text-purple-800 font-bold text-xl">CONST:</h4>
        <ul class="list-disc ml-6 text-gray-700 text-lg">
            <li>
                <p class="font-medium text-purple-800">Ámbito:</p>
                <ul class="list-disc ml-4">
                    <li>Al igual que let, las variables const también tienen un ámbito local (bloque).
                        Reasignación</li>
                </ul>
            </li>
            <li>
                <p class="font-medium text-purple-800">Reasignación:</p>
                <ul class="list-disc ml-4">
                    <li>No puedes reasignar valores a una variable const después de su declaración inicial. Sin embargo, ten en cuenta que no significa que su valor sea inmutable (por ejemplo, si es un objeto, sus propiedades pueden cambiar).</li>
                </ul>
            </li>
            <li>
                <p class="font-medium text-purple-800">Hoisting:</p>
                <ul class="list-disc ml-4">
                    <li>Al igual que let, las variables const no se “elevan” al principio del ámbito.
                    </li>
                </ul>
            </li>
        </ul>

        <h2 class="text-2xl font-bold text-center text-purple-800 my-10">¿Qué es ámbito, hosting, reasignación?</h2>

        <p class="font-medium text-xl text-purple-800 ">Ámbito:</p>
        <p class="text-xl text-center text-gray-700">
            El ámbito se refiere al alcance o contexto en el que una variable o función es válida y accesible.
            Hay dos tipos principales de ámbito:
            Ámbito Global: Las variables declaradas fuera de cualquier función tienen un ámbito global. Pueden ser accedidas desde cualquier parte del código.
            Ámbito Local (o de Bloque): Las variables declaradas dentro de una función o un bloque de código (como un bucle o una estructura condicional) tienen un ámbito local. Solo son accesibles dentro de ese contexto.
        </p>

        <p class="font-medium text-xl text-purple-800 ">Hoisting:</p>
        <p class="text-xl text-center text-gray-700">
            El hoisting es un comportamiento en JavaScript donde las declaraciones de variables y funciones se mueven al principio de su ámbito antes de la ejecución del código.
            Esto significa que puedes usar una variable o invocar una función antes de declararla explícitamente.
            Sin embargo, ten en cuenta que solo las declaraciones se elevan, no las asignaciones.            
        </p>

        <p class="font-medium text-xl text-purple-800 ">Reasignación:</p>
        <p class="text-xl text-center text-gray-700">
            La reasignación se refiere a cambiar el valor de una variable después de su declaración inicial.
            En JavaScript, puedes reasignar valores a variables declaradas con var y let, pero no a las declaradas con const.              
        </p>

        <h2 class="text-3xl font-bold text-center text-purple-800 my-10">Tipos</h2>
        <p class="text-xl text-center text-gray-700">
            En JavaScript, existen varios tipos de datos, y los tipos primitivos son los más fundamentales. Estos tipos primitivos son valores básicos que no son objetos y no tienen métodos asociados. A continuación, te presento los seis tipos primitivos en JavaScript:           
        </p>
        <ul class="list-disc ml-6 text-gray-700 text-lg">
            <li>
                <p class="font-medium text-purple-800">undefined:</p>
                <ul class="list-disc ml-4">
                    <li>Representa la ausencia de un valor. Es como no tener nada, ni papel ni rollo ni estante para ponerlo.</li>
                </ul>
            </li>
            <li>
                <p class="font-medium text-purple-800">null:</p>
                <ul class="list-disc ml-4">
                    <li>Indica que tenemos un valor nulo. Es otra forma de representar la ausencia de un valor.
                        En la analogía que mencionamos antes, sería como no tener ni papel ni rollo, pero sí tener el estante para ponerlo.</li>
                </ul>
            </li>
            <li>
                <p class="font-medium text-purple-800">number:</p>
                <ul class="list-disc ml-4">
                    <li>Representa valores numéricos, ya sean enteros o decimales.
                        Puede incluir números como 3, 3.1416 y también el valor especial NaN (que significa “Not A Number”).</li>
                </ul>
            </li>
            <li>
                <p class="font-medium text-purple-800">string:</p>
                <ul class="list-disc ml-4">
                    <li>Es una cadena de texto.
                        Puedes crear cadenas utilizando comillas simples (') o dobles (").
                        Ejemplo: "Hola, mundo".</li>
                </ul>
            </li>
            <li>
                <p class="font-medium text-purple-800">boolean:</p>
                <ul class="list-disc ml-4">
                    <li>Representa un valor verdadero (true) o falso (false).
                        Se utiliza para controlar condiciones y bucles.</li>
                </ul>
            </li>
            <li>
                <p class="font-medium text-purple-800">BigInt y symbol:</p>
                <ul class="list-disc ml-4">
                    <li>Estos dos tipos son menos comunes y se utilizan en situaciones específicas:
                        <ul class="list-disc ml-6 text-gray-700">
                            <li>BigInt: Se utiliza para representar números enteros muy grandes.</li>
                            <li>symbol: Es un tipo único e inmutable de datos, utilizado para crear identificadores únicos.</li>
                        </ul>
                    </li>
                </ul>
            </li>
        </ul>
        <a class="text-purple-800 text-3xl font-bold text-center hover:text-purple-400 block mt-6" href="/frontend/javascript/operadores-expresiones">Operadores y expresiones...</a>
    </div>
    

</Layout>
