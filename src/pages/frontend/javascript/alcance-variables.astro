---
import Layout from '../../../layouts/Layout.astro';
---

<Layout title="Alcance de Variables en JavaScript">
    <div class="md:w-1/2 m-auto flex flex-col gap-6 container mx-auto p-6">
        <h1 class="text-3xl font-bold text-center text-purple-800 mb-12">Alcance de Variables en JavaScript</h1>

        <p class="text-xl text-center text-gray-700 mb-8">
            En JavaScript, el alcance de una variable o constante se refiere a la región del código donde se puede acceder a ella. Aquí te dejo un resumen de los conceptos clave:
        </p>

        <h2 class="text-2xl font-bold text-center text-purple-800 mt-10">Alcance Global</h2>
        <p class="text-xl text-center text-gray-700">
            Cuando declaras una variable fuera de cualquier función, se le llama variable global. Estas variables pueden ser accedidas desde cualquier parte de tu código.
        </p>
        <pre class="bg-gray-100 p-4 rounded"><code class="text-gray-700">
var variableGlobal = "Soy global";
        </code></pre>

        <h2 class="text-2xl font-bold text-center text-purple-800 mt-10">Alcance Local</h2>
        <p class="text-xl text-center text-gray-700">
            Las variables declaradas dentro de una función son locales y solo pueden ser accedidas dentro de esa función.
        </p>
        <pre class="bg-gray-100 p-4 rounded"><code class="text-gray-700">
function miFuncion() &#123
  var variableLocal = "Soy local";
&#125
        </code></pre>

        <h2 class="text-2xl font-bold text-center text-purple-800 mt-10">Bloque de Alcance</h2>
        <p class="text-xl text-center text-gray-700">
            JavaScript ES6 introdujo <code class="font-mono">let</code> y <code class="font-mono">const</code>, que tienen un alcance de bloque. Las variables definidas con <code class="font-mono">let</code> y <code class="font-mono">const</code> están en el alcance dentro del bloque en el que se declaran, así como en cualquier sub-bloques contenidos.
        </p>
        <pre class="bg-gray-100 p-4 rounded"><code class="text-gray-700">
if (true) &#123
  let variableDeBloque = "Soy de bloque";
  const constanteDeBloque = "Soy una constante de bloque";
&#125
        </code></pre>

        <h2 class="text-2xl font-bold text-center text-purple-800 mt-10">Alcance de la Función</h2>
        <p class="text-xl text-center text-gray-700">
            Las variables definidas con <code class="font-mono">var</code> dentro de una función son locales a esa función y no pueden ser accedidas fuera de ella. Sin embargo, si <code class="font-mono">var</code> se omite, la variable se convierte en global.
        </p>
        <pre class="bg-gray-100 p-4 rounded"><code class="text-gray-700">
function otraFuncion() &#123
  var local = "Soy local";
  globalSinVar = "Soy global";
&#125
        </code></pre>

        <h2 class="text-2xl font-bold text-center text-purple-800 mt-10">Hoisting</h2>
        <p class="text-xl text-center text-gray-700">
            En JavaScript, las declaraciones de variables (con <code class="font-mono">var</code>) son “elevadas” a la parte superior de su alcance. Esto significa que puedes usar una variable antes de declararla.
        </p>
        <pre class="bg-gray-100 p-4 rounded"><code class="text-gray-700">
console.log(miVariable); // undefined
var miVariable = "Hola";
        </code></pre>

        <h2 class="text-2xl font-bold text-center text-purple-800 mt-10">Constantes</h2>
        <p class="text-xl text-center text-gray-700">
            Las constantes (<code class="font-mono">const</code>) funcionan como las variables <code class="font-mono">let</code>, pero no pueden ser reasignadas. Tienen un alcance de bloque.
        </p>
        <pre class="bg-gray-100 p-4 rounded"><code class="text-gray-700">
const PI = 3.1416;
        </code></pre>

        <h2 class="text-2xl font-bold text-center text-purple-800 mt-10">Alcance Léxico</h2>
        <p class="text-xl text-center text-gray-700">
            El alcance léxico, o estático, significa que el alcance de una variable se determina por su posición dentro del código fuente. Esto se establece durante el tiempo de compilación. Las funciones en JavaScript pueden acceder a variables del contexto en el que fueron definidas.
        </p>
        <pre class="bg-gray-100 p-4 rounded"><code class="text-gray-700">
function padre() &#123
  var variablePadre = "Soy del padre";
  function hijo() &#123
    console.log(variablePadre); // "Soy del padre"
  &#125
  hijo();
&#125
padre();
        </code></pre>

        <h2 class="text-2xl font-bold text-center text-purple-800 mt-10">Temporal Dead Zone (TDZ)</h2>
        <p class="text-xl text-center text-gray-700">
            Con <code class="font-mono">let</code> y <code class="font-mono">const</code>, una variable no puede ser utilizada antes de ser declarada. Si se intenta acceder a una variable antes de su declaración, se lanza un error de referencia. Esto se llama la Zona Temporalmente Muerta (TDZ).
        </p>
        <pre class="bg-gray-100 p-4 rounded"><code class="text-gray-700">
console.log(miVariable); // ReferenceError: miVariable 
is not defined
let miVariable = "Hola";
        </code></pre>

        <h2 class="text-2xl font-bold text-center text-purple-800 mt-10">Variables de Función vs. Variables de Bloque</h2>
        <p class="text-xl text-center text-gray-700">
            A diferencia de <code class="font-mono">let</code> y <code class="font-mono">const</code>, las variables declaradas con <code class="font-mono">var</code> no tienen alcance de bloque, lo que puede causar comportamientos inesperados en bucles o estructuras de control.
        </p>
        <pre class="bg-gray-100 p-4 rounded"><code class="text-gray-700">
for (var i = 0; i &lt; 3; i++) &#123
  setTimeout(function() &#123
    console.log(i); // 3, 3, 3
  &#125, 1000);
&#125

for (let j = 0; j &lt; 3; j++) &#123
  setTimeout(function() &#123
    console.log(j); // 0, 1, 2
  &#125, 1000);
&#125
        </code></pre>

        <h2 class="text-2xl font-bold text-center text-purple-800 mt-10">Strict Mode</h2>
        <p class="text-xl text-center text-gray-700">
            En modo estricto (<code class="font-mono">"use strict";</code>), el comportamiento de JavaScript cambia para hacer el código más predecible y seguro. Entre otros cambios, evita la creación accidental de variables globales.
        </p>
        <pre class="bg-gray-100 p-4 rounded"><code class="text-gray-700">
"use strict";
function miFuncion() &#123
  sinDeclarar = "Esto lanza un error";
&#125
miFuncion();
        </code></pre>

        <h2 class="text-2xl font-bold text-center text-purple-800 mt-10">Closures</h2>
        <p class="text-xl text-center text-gray-700">
            Un closure es una función que recuerda el ámbito en el que fue creada, incluso después de que ese ámbito haya terminado de ejecutarse. Esto permite a las funciones internas acceder a las variables de la función externa, incluso después de que la función externa haya finalizado.
        </p>
        <pre class="bg-gray-100 p-4 rounded"><code class="text-gray-700">
function crearContador() &#123
  let contador = 0;
  return function() &#123
    contador++;
    return contador;
  &#125;
&#125

const contador1 = crearContador();
console.log(contador1()); // 1
console.log(contador1()); // 2
        </code></pre>
        <a class="text-purple-800 text-3xl font-bold text-center hover:text-purple-400 block mt-6" href="/frontend/javascript/objetos-propiedades">Objetos Propiedades...</a>
    </div>
</Layout>